import java.util.ArrayList;
import java.util.List;

import com.ldg.printer.BinaryTrees;
import com.ldg.tree.AVLTree;
import com.ldg.tree.BinarySearchTree;
import com.ldg.tree.RBTree;

public class Main {

	public static void main(String[] args) {
		其他测试四();
	}

	private static void 其他测试一() {
		AVLTree<Integer> avl = new AVLTree<Integer>();

		List<Integer> bst = new ArrayList<Integer>();
		bst.add(8);
		bst.add(4);
		bst.add(7);
		bst.add(10);
		bst.add(46);
		bst.add(51);
		bst.add(78);
		bst.add(1);
		bst.add(2);
		bst.add(9);

		for (Integer i : bst) {
			avl.add(i);
			System.out.println("add " + i);
			BinaryTrees.println(avl);
			System.out.println("-------------------------------");
		}

	}

	private static void 其他测试四() {
		RBTree<Integer> rb = new RBTree<Integer>();
		int[] array = new int[] { 1，2，3，4，5，6，7，8，9，10，14，12，13，14，15，16，17，18，19，20，21，22 };
		for (int i = 0; i < array.length; i++) {
			rb.add(array[i]);
			BinaryTrees.println(rb);
		}
		

	}

	private static void 其他测试二() {
		BinarySearchTree<Integer> bst = new BinarySearchTree<Integer>();

		bst.add(8);
		bst.add(4);
		bst.add(7);
		bst.add(10);
		bst.add(46);
		bst.add(51);
		bst.add(78);
		bst.add(1);
		bst.add(2);
		bst.add(9);

		BinaryTrees.println(bst);
		System.out.println(bst.height());
		System.out.println(bst.heightTwo());

	}

	private static void 其他测试三() {
		AVLTree<Integer> bst = new AVLTree<Integer>();

		bst.add(8);
		bst.add(4);
		bst.add(7);
		bst.add(10);
		bst.add(46);
		bst.add(51);
		bst.add(78);
		bst.add(1);
		bst.add(2);
		bst.add(9);

		BinaryTrees.println(bst);
		System.out.println();
		bst.remove(9);
		bst.remove(8);
		BinaryTrees.println(bst);
		bst.remove(4);
		bst.add(100);
		BinaryTrees.println(bst);
		bst.add(101);
		BinaryTrees.println(bst);
		System.out.println();
		bst.remove(78);
		bst.remove(46);
		System.out.println(bst.contains(78));
		BinaryTrees.println(bst);

	}

}
