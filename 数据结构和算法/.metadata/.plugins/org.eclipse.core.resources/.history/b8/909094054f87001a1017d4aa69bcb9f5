package com.ldg.map;

import com.ldg.tree.BinaryTree.Node;

/**
 * 红黑树实现映射一:直接声明可以存放键值对的红黑树
 *
 * @author ldg
 *
 * @param <K>
 * @param <V>
 */
@SuppressWarnings("unused")
public class TreeMap<K, V> implements Map<K, V> {
	// 颜色常量
	private static final boolean RED = true;
	private static final boolean BLACK = false;
	// 元素数量
	protected int size;
	// 根节点
	protected Node<K, V> root;

	@Override
	public int size() {
		return size;
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public V put(K key, V value) {

		// 判断是否有根节点
		if (root == null) {
			root = createNode(element, null);
			size++;
			afterAdd(root);
			return null;
		} else {
			Node<K, V> node = root;
			Node<K, V> parent = null;

			int result = 0;
			// 一直遍历 直到最后一层
			while (node != null) {
				parent = node;
				result = compare(element, node.element);
				if (result > 0) {

					node = node.right;
				} else if (result < 0) {
					node = node.left;
				} else {

					return node.element;
				}
			}
			// 根据结果判断是添加到右子树还是左子树
			Node<K, V> newNode = createNode(element, parent);
			if (result > 0) {

				parent.right = newNode;
				size++;

			} else {
				parent.left = newNode;
				size++;

			}
			afterAdd(newNode);
			return parent.element;
		}
		return null;
	}

	@Override
	public V remove(V value) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean containsKey(K key) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean containsValue(V value) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void traversal(Visitor<V> visitor) {
		// TODO Auto-generated method stub

	}

	private static class Node<K, V> {
		// 默认是红色
		private boolean color = RED;

		K key;
		V value;
		Node<K, V> parent;
		Node<K, V> left;
		Node<K, V> right;

		// 判断该节点是否为叶子节点
		public boolean isLeaf() {
			return left == null && right == null;
		}

		// 判断该节点度是否为2
		public boolean hasTwoChildren() {
			return left != null && right != null;
		}

		// 对&来说，无论第一个表达式为真还是为假，都会继续执行第二个表达式判断；
		// &&当第一个表达式为false的时候，不再继续执行对后边表达式的判断。
		// 当前节点是否为父节点的左节点
		public boolean isLeftNode() {

			return parent != null && this == parent.left;
		}

		// 当前节点是否为父节点的右节点
		public boolean isRightNode() {

			return parent != null && this == parent.right;
		}

		// 获取兄弟节点
		public Node<K, V> getSibling() {

			if (isLeftNode()) {
				return parent.right;
			} else if (isRightNode()) {
				return parent.left;
			} else {
				return null;
			}
		}

		public Node(K key, V value, Node<K, V> parent) {
			this.key = key;
			this.value = value;
			this.parent = parent;
		}

	}

	// 提供子类一个创建节点的方法
	protected Node<K, V> createNode(K key, V value, Node<K, V> parent) {

		return new Node<K, V>(key, value, parent);
	}

}
